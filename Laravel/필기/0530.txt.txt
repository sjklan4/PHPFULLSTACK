기존 코드는 수정시 v002 strat, v002 del등의 커멘트를 주고 주석 처리 후 다음 수정해야 될 작업을 시작한다.
기존의 문제점 및 이력확인을 위해서 코드를 직접 지우지는 않는다. 
버전을 올리는 시점은  = 코드리뷰가 끝난 시점에서 하나씩 올라간다. 

Store = insert 세로운 데이터를 입력 받는 method 부분

아래 구문은 유효성 구문을 위해서 제목은 3,30글자로, 내용은 1000글자로 제한을 주는 구문
  $req->validate([
            'title' => 'required|between:3,30' ->제목 글자수 제한
            ,'content' => 'required|max:1000' -> 내용 글자수 제한
        ]);

**:: Validation-유효성 검사**

--view에서 오류시 보여주는 구문
 if문을 가지고 error발생시 foreach문을 통해서 모든 에러 사항을 받아와서 그 error 구문이
 발생하도록 한다. - controller에서 작성한 조건에 맞지 않으면 error를 출력해 준다.

 아래는 예시문
@if(count($errors) > 0)
        @foreach ($errors->all() as $error)
            <div>{{$error}}</div>
        @endforeach
    @endif

-- 오류 난 값만 지워지고 기존 값은 유지 되도록 하는구문
value="{{old('title')}}" : 유지 하고자 하는 부분에 추가 한다. 


--update 형식 유효성 체크
public function update(Request $request, $id)

위와 같이 파라미터가 2개 일시 앞에 값의 내용을 var_dump로 찍어서 안에 데이터 
유무 상태등을 확인한다음 진행 할 수 도 있다. 
지금은 $request안에 $id값이 없기 때문에 별도의 배열로 전환시켜서 merge함수를 통해서
$request안에 $id값을 넣어 주도록 한다. 

<사용 예시>
아래 구문과 같이 $id파라미터를 연상배열로 만들어서 $arr로 선언해주고 $request값안에 merge 함수를
가지고 배열로 만든 $id를 값에 합쳐 준다. 
위 정차를 진행한 결과 $request안에 $id값이 배열의 값으로 같이 들어 가게 된다. 
'확인 필요시 var_dump로 확인 필요'
합친결과 $request는 ID값도 추가로 들어 가게 되고 그 결과 validate로 한번에 
조회가 가능하도록 한다. 

    public function update(Request $request, $id)
    {
         // ********************v002 add start************************** : 유효성 체크를 위한 구문
        $arr = ['id' => $id];
        $request->merge($arr); // = $request ->request->add($arr); 과 같은 기능 속도차

        $request->validate([
            'id'        => 'required|integer' //numeric : integer로도 가능하나 같은 의미에서 정수로만 한다. 라는 의미로 사용
            ,'title'    => 'required|between:3,30'
            ,'content'  => 'required|max:2000'
        ]);
위 구문 적용 확인시 관리자 모드(F12)에서 ID부분을 변경 하여 작동 여부 확인가능

tip : 유효성 체크는 기획 단계에서 어떤것을 어떻게 체크를 시킬지 미리 정해 놓아야 한다.

-- PK특징
보통 pk는 정수형으로 주고 email같은 문자열을 pk로 하게되면 서버에 부하를 주게 된다.
보통 사용시 아무의미 없는 값 id 번호 와 같은 값을 pk로 지정해서 해당 유저의 고유한 값을
사용 하도록 한다. pk는 주로 session에 저장된다. 

-- softDeletes를 사용 하려면 models에 use Illuminate\Database\Eloquent\SoftDeletes;를
추가해서 softDeltes를 작동하도록 한다. 다음
class에 use에 softdeletes를 추가 한다. 
추가한 구문  'use HasApiTokens, HasFactory, Notifiable, SoftDeletes;'

아래 추가적인 구문 : elaquent를 사용하기 위해서 추가해 주어야 한다. 
 'protected $dates = ['deleted_at'];'

 **migrate는 DB에서 강제로 삭제시 다시 생성이 불가**

 사이드 임팩트???????? 하나의 데이터 수정을 통해서 다른 데이터들의 값들이 
 수정되어 영향을 받도록 하는 기능 추가.필.!

 
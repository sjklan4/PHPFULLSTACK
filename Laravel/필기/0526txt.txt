 git : ldh1103 - 동호씨 깃 잘보기......
 블로그 : ldh1123.tistory.com

laravel생성문(전체 흐름 : 라라벨 폴더 생성 -> 폴더 안에 model생성 ->migration생성 후 테이블 조건 설정 ->db테이블 생성  )
composer create_project laravel/laravel="9" board

-- 모델 생성
폴더 위치 설정후 : php artisan make:model Boards(생성모델명) -mfs(옵션으로 migration, factories(대량 랜덤데이터), seeds(초기값 입력시)) 작성

--테이블 생성
DB설정중 DB의 각 컬럼별 값 설정은 migrations에서 작성
더미데이터 입력시 또는 기타 데이터 입력시 factories에서 설정
데이터 입력시 seeders폴더에서 DatabaseSeeder에서 경로 창을 작성후 입력

: php artisan migrate --seed 로 실행  : seed까지 실행시키면 더미데이터까지 생성되어서 migrate가 된다. 

seeders만 별도 실행시 
php artisan db:seed 로 별도 실행이 가능하다.

factories에서 설정한 값을 seeders에서 넣어 준다

--sql에 db작성 방법:
env파일 조정후 migration작성 
migration작성 방법 : php artisan migrate --seed

-- route설정시 
파일 명과 가능한 같게 만든다.
라우트를 설정시 컨트롤러를 만들때 라우트가 정상적으로 작성되어 있는지 확인해야 한다. 

-- models설정시 
SoftDeltes를 설정시 del플레그가 있는 데이터는 제외 해서 가져오게 한다. 

아래는 modles의 boards 설정 현황이다. 
위에는 use를 통해서 사용하려는 모델과 값들을 정의 해주어야 한다. 
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;


class boards extends Model
{
    use HasFactory, SoftDeletes;

    protected $guarded = ['id', 'created_at'];

    protected $dates = ['deleted_at'];

}

-- controllers에서는 데이터를가져오기 위한 구문을 작성해야 한다. 
resource 오션을 주어서 작성시 각 부분별로 생성된 부분에 대해서 라라벨에서 요구하는 설정에 맞추서 
작성을 해준다..
아래 구문은 예시이다. 

  public function index() //데이터를 받아오기 위한 구문 작성
    {
        $result = boards::all();
        return view('list')->with('data', $result); // 뷰에 데이터를 보내주기 위해서 with문을 사용한다.
    }

$result = boards::all(); : 데이터전부를 가져오는 설정으로 all값을 사용해서 모든 데이터를 불러오도록 하였다.
return view('list')->with('data', $result); :  return에서 view 주소를 지정해주고 with을 사용해서 data(단수로 작성) $가져오려는 데이터의 변수 설정

아래 구문은 select를 이용해서 가져오려는 컬럼을 지정해서 불러 올 수 있다.
다음 orderBy를 통해서 기준점과 정렬 방법을 설정한다음 데이터를 받는 방법(get, post)를 설정해 준다.
$result = boards::select(['id','title','hits','created_at','updatede_at'])->orderBy('hits','desc')->get();


-- view에서 작성 페이지 작성시
view단에서 작성페이지로 연결을 위해서 a테그로 묵어주고 
<a href="{{route('boards.create')}}">작성</a> borads.create를 통해서 컨트롤러의 명령을 지정해 주어서 사용하였다.

{{route(설정 이름)}} 여기서 설정 이름은 list를 조회해서 이름을 확인하다. ( php artisan route:list)
예제에서는 {{route('boards.store')}} 로 a테그로 묶어 주어서 post방식으로 전달되도록 하였다. 

-- Db에 테이블 생성시 migrations 폴더안에 up부분에 아래와 같은 형식으로 작성을 해준다.
  public function up() //테이블의 설정을 잡아 주는 구문
    {
        Schema::create('boards', function (Blueprint $table) {
            $table->id();
            $table->string('title', 30);
            $table->string('content', 2000);
            $table->integer('hits');
            $table->timestamps();
            $table->softDeletes();
        });
    }
schema::create 라는 명령을 통해서 table을 DB에 생성시켜준다.

-- alter 테이블 작성시
php artisan make:migration alter_boards_table 을 터미널에 명령을 주고 난뒤 
** composer require doctrine/dbal : 패키지 관리자 설치 ** 
아래의 구문을 통해서 alter문을 활성화 시켜준다. - 필요 사항으로는 alter와 같은 수정이 필요할시 migrations
을 계속해서 만들어 주어야 한다.???????????

  public function up() //db를 어떻게 해서 올릴지 작성하는 구문
    {
        Schema::table('boards', function (Blueprint $table) {
            $table->integer('hits')->default(0)->change(); //hits의 값을 디폴트로 0을 주려고 한다.
        });
    }

show 부분에서 find를 통해서  show($id)를 가져와서 다 찾아주는 역활을 한다.
select * 과 같은 기능으로 모든 데이터들을 조회한다.
 
--controllers에서 지정해서 불러오는 데이터들은 변수로 담아 오기 때문에 
{{$data->id}} 와 같은 모양으로 해서 view에서 불러 온다. data가 변수라서 $data로 해서 지정한 컬럼을 넣어준다.
.tip
save는 처음에는 insert를 하고 실패시 update를 자동으로 실행한다. 
find 와 findOrFail은 리턴시 의 반응이 틀리다 전자는 불린으로 후자는 리턴으로 해서 종료를 시켜버린다.

{{Route('boards.show', ['board' => $data->id])}} 이 구문에서 board는 세그먼트 아이디로 지정된 글의
번호를 가지고 작업을 하도록 해주는 구문을 작성한 것이다. 

뷰로 바로 리턴시 업데이트의 URL로 바뀌지 않고 그대로 돌아 오는 문제점이 생긴다.
URL이 바뀌면 무조건 redirect를 해주어야 한다.

DB를 직접 사용해서 하는 것은 ORM이 아니다. ORM은 DB와의 객체를 통해서 통신해야만 ORM을 사용했다고 
할 수 있다. 

API경우에 method로만 구분해서 사용해야 된다.

DB객체를 이용해서 delete를 하면 레코드 자체가 삭제 되기 때문에 사용시 주의 필요
Eloquent를 사용해서 delete를 사용하면 softDelete가 된다. - 레코드는 삭제 하지 않는다. 

-- method지정시 url사항
form을 이용해서 route를 url을 정해 주더라도 method를 선언한쪽에서 그 기능을 지정해 준다면 url과 
무관하게 method를 작동하게 된다. 
ex :   <form action="{{route('boards.destroy',['board' => $data->id])}}" method="post">
            @csrf
            @method('delete')
            <button type = "submit">삭제</button>
        </form>


========== new 구문 -===================
아래 구문은 db에 없는 데이터를 가져오기 때문에 new Boards를 통해서 실행을 하게 된다. 
    public function store(Request $req)
    {
        $boards = new Boards([
            'title' => $req->input('title')
            ,'content' => $req->input('content')
        ]);
        $boards->save(); //위 내용을 인서트 시키는 구문
        return redirect('/boards'); //url로 돌아가는 구문 - 작성이 완료되면 list인 메인 페이지로 보내주는 구문
    }



0526 연습중 발생한 오류
SQLSTATE[HY000]: General error: 1364 Field 'title' doesn't have a default value (SQL: insert into `prboards` (`updated_at`, `created_at`) values (2023-05-26 10:11:53, 2023-05-26 10:11:53))

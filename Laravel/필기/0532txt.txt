--- 테스트 ---

 각 항목마다 테스트 케이스를 확인해서 진행한다. 
라라벨은 테스트 유닛을 통해서 php를 편하게 테스트 할 수 있게 해준다.

테스트를 하는데 보더 기준으로 테스트를 한다. 보더 컨트롤러를 열고 이 컨트롤러를 테스트 할것이다. index가 켜졌을때 테스트를 할 것이다. 일단 특정 유알엘로 접속했을때 이 index가 켜져야 되고 
로그인 했을때 리스트 페이지로 가는등 이 곳의 기능들이 되는지 테스트를 해본다. method는 테스트로 시작해야 구동한다. test로 시작하는데 이름은 영어 한글 다 가능
  
  실제 구문
  public function test_index_게스트_리다이렉트()
    {
        $response = $this->get('/');    -> 보더에서 결과를 받아와서 redirect로 돌려 준다. 안될시 보더 체크에 로그인 체크를 확인해 봐야 한다. 

        $response->assertStatus(200);  -> 이부분 확인 해야 된다. 
    }

env 파일을 하나 복사해서 테스트용으로 만들고 DB_DATABASE에서 test용 DB주소를 하나 추가 한다. 

테스트 설정후 터미널 창에
php artisan test 를 작성해서 작동 여부 확인 한다. 

-- assertViewHas 는 뷰 안에 설정한 값의 이름이 있는지 확인
ex) $response->assertViewHas('data'); 에서 data값이 있는지 view에서 찾아보도록 한다. 


--error 핸들링

view폴더에서 errors 에서 해당 에러 번호 .blade.php 를 만들면 에러 컨트롤이 가능하다
Ex : 404.blade.php 안에 표시하고자 하는 에러 표시 

---------------------------0602-------------------------------------------------------------------------
lang파일에 en폴더 안에 있는 파일들은 상황에 따른 메시지 안내문들이 있다.
en폴더를 하나 복사후 이름을 ko로 변경후 설정파일 변경
config폴더의 app의 fallback이나 locale부분을 ko로 변경 
attributes 부분의 배열 내용을 한글로 바꾼다. 
각 바꾸고 싶은 메시지 부분을 지정 속성에 맞춰서 바꾼다.

--------------로깅-------------------------------------------------------------------------
특수 사항에 따라 로그를 남겨 놓고 그것을 확인한다. 시스템에 따라서 저장 방법이 다 다르다.
라라벨은 가능한 파일형식으로 저장한다. storage폴더에 저장된다. 
레벨에 따라서 log파일안에 기록이 된다. 그 레벨 설정은 .env에서 설정 한다.
.env -> LOG_LEVEL 에서 설정

log를찍어 놓으면 오류 또는 진행 사항 등을 알 수 있다.
진행 사항에 따라 중간중간 Log::debug("표시할 명령내용"); 방식으로 찍어주면 log확인이 가능하다.


-------------------토큰--------------------------------------------------------------------------------------------------
검증 작업을 위해서 웹이나 데이터베이스 서버등에 저장 또는 JWT를 통해서 유저인증작업을 하기도 한다. 
휴대폰 어플은 쿠키가 없어서 JWT 토큰을 통해서 인증을 하게 된다. 

--------------intended method----------------------------------------------------------------------------
유저의 인증 페이지로 넘어 가도록 하는 method 처음 접속하려고 하던 URL로 접속하게 하고 없으면 다시 인증관련 페이지로 
돌아가도록 만든다. 


뷰를 리턴 했을때와 리다이렉트를 리턴했을때의 차이는 : redirect는 요청한 값이 session에 저장되서 다시 돌아 갈때 그 값을 그대로 가지고 다시 돌아 
가는것이고 뷰는 뷰자체에 데이터 값을 가지고 가기때문에 한번 나간 데이터는 없는 것이다.  

with는 session에 등록 한다. 



------------------------------------------복습 내용 0602-----------------------------------------------------------------------------------
데이터를 받을때 컨트롤러에서 펑션안에 Request $받는 이름 을 설정해야 된다.
ex)
 public function loginpost(Request $req)
    {
        '진행할 내용'
    }


정규식으로 글자수 제한도 가능하다.

@if($errors->any())
    @foreach($errors->all() as $error) 
        <div stlye="color:red">{{$error}}</div>
    @endforeach

@endif
d 위구문에서 all()은 해당 객체에 있는 모든데이터를 가져온다.

오류 발생시 역순으로 한단계씩 다시 찾아가본다. 

elaquent를 사용시에만 softDeletes를 사용할 수 있다. delete시 elaquent를 사용하지 않는다면 flg를 바꾸는 방식으로 작업해야 된다.

withErrors에 일반 string으로 오류 메시지를 담으면 자동으로 변경되서 출력해준다. 

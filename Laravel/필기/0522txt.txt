0522
서버에 직접 관리할 수도 있으나 가능한 사용하지 않는쪽으로.
디렉토리 : 리눅스에서 폴더를 지칭
폴더 :  윈도우 기반에서 지칭
vs에서 cd D:\Students\sangjoon\PHPFULLSTACK\PHPFULLSTACK\Laravel 로 폴더 경로 작성
composer는 리눅스 기반임으로 디렉토리로 생각 
윈도우에서 리눅스 cmd사용시 파워쉘을 사용해서 한다. 
또는 깃 화시 를 사용해서 사용 하기도 한다. 
cls하면 화면 정리 
ls는 디렉토리 안의 파일 내용을 보여주는 것 아무것도 없으면 아무것도 없다. 
composer create-project laravel/laravel="9(버전)" 버전 설정 설정을 안하면 가장 최신 
디폴트 버전으로 그다음 폴더명 (edu-laravel) :composer create-project laravel/laravel="9" edu-laravel
위의 php.ini에 들어가서 
php.ini에서 zip을검색해서 extension=fileinfo 주석을 지워준다.
 아래 구문을 터미널에 입력
composer create-project laravel/laravel="9" edu-laravel(라라벨 프로젝트 디렉토리 명)

아파치 의 httpd.conf를 들어 간다.
-------------------------------------주소 경로 설정--------------------------------------------------------
DocumentRoot "${SRVROOT}/htdocs/edu-laravel/public"
<Directory "${SRVROOT}/htdocs/edu-laravel/public">
---------------------------------------------------------------------------------------------

    이 부분을 들어가서 위와 같이 수정을 한다. 
다음 mod_rewrite모듈을 주석 해재 시켜야 된다. - 지금은 미니 프로젝트 중 변경 

[LoadModule rewrite_module modules/mod_rewrite.so]

laravel폴더의 edu-laravel(만들어 놓은 폴더)를 htdoc로 가져 온다.(*복붙*) composer이후에 본 파일에 라라벨 설정들이 모여 있으므로 다시 복붙을 해야 된다.
그다음 서비스에서 아파치 재실행

터미널에서 
아래 구문 작성후 확인
cd C:\Apache24\htdocs\edu-laravel : 실행 경로 지정
다시 아래 구문 작성 확인.
php artisan serve : 아파치는 자동 실행으로 필수는 아님 라라벨 서버시작을 위한 구문 - 리눅스는 파일 등록시 자동 다운. - 이작업 필요

git에서 확장 프로그램들 설치 진행

프레임 워크는 도구가 제시하느는 기준에 맞춰서 그 기준에 맞춰서 진행을 
해야 된다 - 개발의 주도권이 도구한테 있는것
프레임 워크라는 것은 가장 아래 있고 그것을 기반으로 개발자의 소스 코드가 들어간다.
그 위에 라이브러리 가 얹어 진다.  따라서 주 = 프레임 워크 - 주도권이 도구한테 있다는것

초기에 프레임 워크의 룰을 따라가는 것을 학습해야 되는것이 중요 
흐름파악 중요

라라벨의 단점이자 장점은 제공해 주는 기능이 너무 많다는 것

라라벨 life cycle 유저가 요청시 entry point로 시작. 순서대로 진행 controller or closure까지 
도달하면 다시 위로 올라가서 유저한테 전달


미들웨어는 직접적으로 사용 하는 일은 없다. 
대신에 컨트롤러는 계속 만들어 나갈 예정 / 컨트롤로의 기본 베이스는 라라벨이 만들어 준다. 
컨트롤러는 cmd라인에서 작성해서 만들어 진다. 의존성은 자동으로 실제 만들어지는 곳은
http안에 controller에서 만들어 진다. 
http 안에 Model은 mvc모델 연습에서 사용한 model과 같다. 내부에서 db연결 작업이 전부 가능하다.
프로바이더 = 아직은 설정 하지 않음

뷰의 blade는 라라벨에서 주는 템플릿
'파일명.템플릿명.php'

라우터 
회색으로 나오는 것은 깃에 포함이 안되는 것으로 깃으로 배포시 포함이 안되어서 별도로 
잡아줘서 보내야된다. 

깃 어트리 뷰트는 가능한 수정은 잘 안한다.  - 가능한 기본 셋으로 필요시만 수정
text auto는 개행설정 방법  - 윈도우와 리눅스는 서로 방법이 달라서 자동으로 맞춰준다는 뜻

버전 관리에서 관리가 안되는것들은 gitigoner에 표시 되어 있다. vender는 배포용 버전 관리

php storm : 유로버전으로 사용하기 좋은 IDE - vs code보다 좋다. ㅋ

view는 헬프 함수라고 한다. view(명칭)은 파일의 명칭 부분을 불러 오는 기능을 한다. 
get : method의 get방식은 route에 표시 

Route :: method방식입력후 (해당 경로 작성)funtion()표현 방식 작성 

.env파일에 app_debug가 true이면 모든 오류 사항 - 소스코드까지 다 보여 준다  = 배포시에는
faslse로 바꿧 배포 해야 된다. 

파일 이름 작성시 blade가 없으면 그 템플릿 안에 잇는것은 사용이 불가

@csrf : (사용자가 서버에 요청하고 응답을 받으면 그동안 공격자가 그 응답내용을 탈취 
하는 공격) 를 view에 작성해 주어야 공격에 대한 대비로 창이 열린다.

일단은 쿼리스트링으로 무엇을 보내줄지 안정했는데 받는 방법은 return request변수 값을
가지고 데이터를 전달해 줄수 있다. request는 get post 전부 가져 올 수 있다. 

세그먼트 '/' 로 나눠지는 부분을 지칭한다. 세그먼트에 값을 지정하지 않으면 값 사용 불가
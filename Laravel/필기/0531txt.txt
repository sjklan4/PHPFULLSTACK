br테그를 넣으려면 중괄호 1셋트만 사용하고 양쪽에 !!두개를 삽입해 준다.

비로그인에서 상태에서도 하려면 header에 로그인 관련 문구를 넣어준다.

0. REST(Representational State Transfer) API란?
	로이 필딩이 2000년에 정의한 네트워크 소프트웨어 아키텍처
	네트워크에서 통신을 구성할 때 사용하는 설계 지침
	태생 자체가 데이터 송수신에 최적화 되어 있다보니 웹 API 쪽에서 굉장히 많이 사용

1. REST API의 조건
	1-1. Client-Server
		클라이언트와 서버로 분리되어야하며 서로 의존성이 없어야 한다.
	1-2. Stateless(무상태성)
		상태 정보를 따로 저장하지 않으며, 이용자가 누구인지 혹은 어디서 접근하는지와 관계 없이 결과가 무조건 동일해야 한다.
		따라서 REST API는 필연적으로 오픈될 수밖에 없다.
	1-3. Cache
		HTTP를 비롯한 네트워크 프로토콜에서 제공하는 캐싱 기능을 적용할 수 있어야 한다.
	1-4. Uniform Interface
		데이터가 표준 형식으로 전송될 수 있도록 구성 요소 간 통합 인터페이스를 사용한다.
		REST API는 HTTP 표준인 URL과 응답 코드, Request-Response Method를 사용한다.
	1-5. Layered System
		API는 REST 조건을 만족하면 필연적으로 오픈될 수 밖에 없기 때문에,
		요청된 정보를 검색하는데 있어 계층 구조로 분리되어야 한다.
	1-6. Self-descriptiveness
		API를 통해 전송되는 내용은 별도 문서 없이 쉽게 이해할 수 있도록 자체 표현 구조를 지녀야 한다.
		현재는 주로 JSON이 가장 많이 사용되며, 간혹 XML이 사용된다.

3. REST API 설계 예시
	3-1. URI는 동사보다는 명사를, 대문자보다는 소문자를 사용하여야 한다.
	3-2. 마지막에 슬래시 (/)를 포함하지 않는다.
	3-3. 언더바 대신 하이픈을 사용한다.
	3-4. 파일확장자는 URI에 포함하지 않는다.
	3-5. 행위를 포함하지 않는다.
	3-6. 복수형 명사를 사용한다.

	EX) GET  	http://localhost/members/1  	:  	1번 회원 조회
		POST 	http://localhost/members		:  	회원 정보 리소스 생성
		PUT  	http://localhost/members/1  	:  	1번 회원 정보 수정
		DELETE 	http://localhost/members/1 	: 	1번 회원 정보 삭제.


개발 툴 : POSTMAN

라라벨에서는 routes/api.php 에서 작성한다. : 주소창에서 localhost/api/.....로 시작한다.

--Api컨트롤러 
api컨트롤러 생성 : php artisan make:controller ApiListController
use App\Models\Boards; 컨트롤러에 use설정

Api에서도 아래 use설정
use App\Http\Controllers\ApiListController;
route파일의 api부분에 route생성
EX : 
Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

Route::get('/list/{id}', [ApiListController::class, 'getlist']);

컨트롤러 안에서 api컨트롤러에 아래의 값을 넣는다.
-- 아래는 get방식 -- 
class ApiListController extends Controller  
{
    function getlist($id){              -- method 작성 get방식으로 list값을 가져와서 Board테이블의 값을 가져오는 구문이다. 
        $user = Boards::find($id);
        return response()->json($user,200);

    }
}

-- post방식 -- : DB로 데이터를 api통신으로 주기 위한 방식
   function postlist(Request $req){
        // 유혀성 체크 필요

        $boards = new Boards([
            'title' => $req->title
            ,'content' => $req->content
        ]);
        $boards->save();

        $arr['errorcode'] = '0';
        $arr['msg'] = 'success';
        $arr['data'] = $boards->only('id','title');
        return $arr;

    }


--API 연결------------------------
<adv> url주소안에 있는 값을 가지고 해도 되지만 정확하게 명시를 해주기 위해서 url에 값을 지정해 준다. 

route의 api에서 route구문을작성해서 api주소와 설정 controller를 만들어 주려고
controller에서 function을 작성해준다. 테스트를 위해서 postman에서 route에서 설정한 
주소를 가지고 조회를 하는데 설정한 get, post, put, delete등에 맞춰서 만든다음에 주소를
입력하면 작동하도록 한다. 
ex>
--get 통신
- route부분 -
	Route::get('/list/{id}', [ApiListController::class, 'getlist']);

 - controller부분- 
    function getlist($id){
        $boards = Boards::find($id);
        return response()->json($boards,200);

    }

- postman에서 조회 하는 부분 주소 - 
		localhost/api/list/2


라라벨에서 배열을 리턴시키면 자동으로 json으로 변경되서 보내 준다. 

--날씨 API예시 --
아래 주소를 controller를 통해서 요청을 보내면 아래 주소로 부터 받은 데이터를 원하는 방식으로 표현해서 출력이 가능하다.
요청을 보내기 위해서 아래 요청한 주소에 맞춰서 조건을 맞추면 데이터를 보낼수 있고 보낸 데이터를 받아 올 수 있다.  
https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude={part}&appid={API key}

******rest API는 별도 상담작업후 진행 필요!
